package examples;

import java.util.Vector;

/*
    Потокобезопасный класс

    Способы добавить новую функциональность в существующие потокобезопасные классы:
    1) Изменить исходный класс для поддержки нужной операции (самый безопасный).
    Если есть возможность изменить исходный класс, необходимо понять реализацию политики синхронизации,
    чтобы можно было изменить его, соблюдая исходный дизайн.

    2) Расширение класса, принимая допущение, что он был разработан для расширения.
    Не все классы предоставляют достаточный доступ к своему состоянию подклассам, чтобы позволять использование такого подхода.
    Расширение более хрупко, чем добавление кода непосредственно в класс.

    3) Расширение функциональности класса без расширения самого класса,
    путем размещения кода расширения во “вспомогательном” (helper) классе.
 */
public class BetterVector<E> extends Vector<E> {
    public synchronized boolean putIfAbsent(E e) {
        boolean absent = !contains(e);
        if (absent) {
            add(e);
        }
        return absent;
    }
}
